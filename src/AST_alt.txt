module AST_alt where

import Data.Map.Lazy (Map)

type Ident = String

data Constants
  = CInt Integer
  | CString String
  | CChar Char
  deriving (Show, Eq)

data PrimaryExpression
  = Ident Ident
  | Constant
  | Expression Expression
  deriving (Show, Eq)

data PostFixExpression
  = PrimaryExpression PrimaryExpression
  | BrackExpression PostFixExpression Expression
  | Parens PostFixExpression
  | Args PostFixExpression ArgumentExpressionList
  | Dot PostFixExpression Ident
  | PointerOp PostFixExpression Ident
  | Inc PostFixExpression
  | Dec PostFixExpression
  deriving (Show, Eq)

type ArgumentExpressionList = [AssignmentExpression]

data UnaryExpression
  = PostFixExpression Expression
  | Inc' UnaryExpression
  | Dec' UnaryExpression
  | UnaryExpression UnaryOperator CastExpression
  | Sizeof UnaryExpression
  | SizeofParens TypeName
  deriving (Show, Eq)

data UnaryOperator
  = And
  | Mult
  | Plus
  | Minus
  | BNot
  | Not
  deriving (Show, Eq)

data CastExpression
  = NoCast UnaryExpression
  | ParensCast TypeName CastExpression
  deriving (Show, Eq)

data MultiplicativeExpression
  = Mult' MultiplicativeExpression CastExpression
  | Div MultiplicativeExpression CastExpression
  | Mod MultiplicativeExpression CastExpression
  deriving (Show, Eq)

data AdditiveExpression
  = MultExpr MultiplicativeExpression
  | AddExpr AdditiveExpression
  | SubExpr AdditiveExpression
  deriving (Show, Eq)

data ShiftExpression
  = AddExpr' AdditiveExpression
  | ShiftLeftOP AdditiveExpression
  | ShiftRightOp AdditiveExpression
  deriving (Show, Eq)

data RelationalExpression
  = ShiftExpr ShiftExpression
  | LessExpr ShiftExpression
  | GreaterExpr ShiftExpression
  | LessEqExpr ShiftExpression
  | GreaterEqExpr ShiftExpression
  deriving (Show, Eq)

data EqualityExpression
  = RelExpr RelationalExpression
  | EqOp RelationalExpression
  | NeqOp RelationalExpression
  deriving (Show, Eq)

data AndExpression
  = EqExpr EqualityExpression
  | AndExpr EqualityExpression
  deriving (Show, Eq)

data ExclusiveOrExpression
  = AndExpr' AndExpression
  | XorExpr AndExpression
  deriving (Show, Eq)

data InclusiveOrExpression
  = XorExpr' ExclusiveOrExpression
  | InclusiveExpr ExclusiveOrExpression
  deriving (Show, Eq)

data LogicalAndExpression
  = InclusiveOr InclusiveOrExpression
  | LogicalAnd LogicalAndExpression InclusiveOrExpression
  deriving (Show, Eq)

data LogicalOrExpression
  = LogicalAnd' LogicalAndExpression
  | LogicalOrExpression LogicalAndExpression
  deriving (Show, Eq)

data ConditionalExpression
  = LogicalOr LogicalOrExpression
  | TernaryOp LogicalOrExpression Expression ConditionalExpression
  deriving (Show, Eq)

data AssignmentExpression
  = CondExpr ConditionalExpression
  | Expr UnaryExpression AssignmentOperator AssignmentExpression
  deriving (Show, Eq)

data AssignmentOperator
  = Eq
  | MulAssign
  | DivAssign
  | ModAssign
  | AddAssign
  | SubAssign
  | LeftAssign
  | RightAssign
  | AndAssign
  | XorAssign
  | OrAssign
  deriving (Show, Eq)

data Expression
  = AssignmentExpression AssignmentExpression
  | MoreExpression AssignmentExpression
  deriving (Show, Eq)

data ConstantExpression
  = CondExpr' ConditionalExpression
  deriving (Show, Eq)

data Declaration
  = DeclarationSpecifiers DeclarationSpecifiers
  | DeclSepList InitDeclarationList
  deriving (Show, Eq)

{- data DeclarationSpecifier
  = StorageSpecifier StorageClassSpecifier
  | TypeSpecifier TypeSpecifier
  | TypeQualifier TypeQualifier
  deriving (Show, Eq) -}

data DeclarationSpecifiers
  = StorageClassSpecifier StorageClassSpecifier
  | StorageClassSpecifier' DeclarationSpecifiers
  | TypeSpecifier TypeSpecifier
  | TypeSpecifier' DeclarationSpecifiers
  | TypeQualifier TypeQualifier
  | TypeQualifier' DeclarationSpecifiers
  deriving (Show, Eq)

type InitDeclarationList = [InitDeclaration]

data InitDeclaration
  = Declarator Declarator
  | DeclaratorInit Initializer
  deriving (Show, Eq)

data StorageClassSpecifier
  = TypeDef
  | Extern
  | Static
  | Register
  deriving (Show, Eq)

data TypeSpecifier
  = TyVoid
  | TyChar
  | TyShort
  | TyInt
  | TyLong
  | TyFloat
  | TyDouble
  | TySigned
  | TyUnsigned
  | TyStruct StructureOrUnionSpecifier
  | Enum EnumSpecifier
  | TyName Ident
  deriving (Show, Eq)

data StructureOrUnionSpecifier
  = StructOrUnionBraceIdent Ident StructDeclarationList
  | StructOrUnionBrace Ident
  | StructOrUnion Ident
  deriving (Show, Eq)

data StructureOrUnion
  = Struct
  | Union
  deriving (Show, Eq)

type StructDeclarationList = [StructDeclaration]

data StructDeclaration
  = StructDeclaration SpecifierQualifierList StructDeclaratorList
  deriving (Show, Eq)

data SpecifierQualifier
  = SQTypeSpecifier TypeSpecifier
  | SQTypeQualifier TypeQualifier
  deriving (Show, Eq)

type SpecifierQualifierList = [SpecifierQualifier]

type StructDeclaratorList = [StructDeclarator]

data StructDeclarator
  = SDDeclarator Declarator
  | SDConst ConstantExpression
  | SDDeclConst Declarator ConstantExpression
  deriving (Show, Eq)

data EnumSpecifier
  = EnumBrace EnumList
  | EnumIdentBracce Ident EnumList
  | EnumIdent' EnumList
  deriving (Show, Eq)

type EnumList = [Enumerator]

data Enumerator
  = EnumIdent Ident
  | EnumCosnt ConstantExpression
  deriving (Show, Eq)

data TypeQualifier
  = Const
  | Volatile
  deriving (Show, Eq)

data Declarator
  = PointerDeclarator Pointer DirectDeclarator
  | DirectDeclarator DirectDeclarator
  deriving (Show, Eq)

data DirectDeclarator
  = DDIdent Ident
  | DDConstExprBrack ConstantExpression
  | DDBrack
  | DDParamsParens ParameterTypeList
  | DDIdentListParens IdentifierList
  | DDParens
  deriving (Show, Eq)

data Pointer
  = Star
  | StarTypeQualifiers TypeQualifierList
  | StarPointer Pointer
  | StarTypeQualifiersPointer TypeQualifierList Pointer
  deriving (Show, Eq)

type TypeQualifierList = [TypeQualifier]

type ParameterTypeList = [ParameterList]

type ParameterList = [ParameterDeclaration]

data ParameterDeclaration
  = PDDeclSpecsDecl DeclarationSpecifiers Declarator
  | PDDeclSpecsAbstractDecl DeclarationSpecifiers AbstractDeclarator
  | PDDeclSpecs DeclarationSpecifiers
  deriving (Show, Eq)

type IdentifierList = [Ident]

data TypeName
  = TNSpecifierQualifiers SpecifierQualifierList
  | TNSpecifierQualifiersAbstractDecl SpecifierQualifierList AbstractDeclarator
  deriving (Show, Eq)

data AbstractDeclarator
  = ADPointer Pointer
  | ADDirectAbstractDeclarator DirectAbstractDeclarator
  | ADPointerDirectAbstractDeclarator Pointer DirectAbstractDeclarator
  deriving (Show, Eq)

-- not every parens/brace is actually covered here
data DirectAbstractDeclarator
  = DAD1 AbstractDeclarator
  | DAD2 -- '[' ']'
  | DAD3 ConstantExpression
  | DAD4 DirectAbstractDeclarator
  | DAD5 DirectAbstractDeclarator ConstantExpression
  | DAD6 -- '(' ')'
  | DAD7 ParameterTypeList -- '(' ')'
  | DAD8 DirectAbstractDeclarator -- '(' ')'
  | DAD9 DirectAbstractDeclarator ParameterTypeList
  deriving (Show, Eq)

data Initializer
  = IAssignmentExpr AssignmentExpression
  | IInitListBrace InitializerList
  deriving (Show, Eq)

type InitializerList = [Initializer]

data Statement
  = SLabeledStatement LabeledStatement
  | SCompound CompoundStatement
  | SExpression ExpressionStatement
  | SSelection SelectionStatement
  | SIteration IterationStatement
  | SJump JumpStatement
  deriving (Show, Eq)

data LabeledStatement
  = LSLabeledStatement Ident Statement
  | LSCase ConstantExpression Statement
  | LSDefault Statement
  deriving (Show, Eq)

data CompoundStatement
  = CSBrace
  | CSStatementsBrace StatementList
  | CSDeclarationsBrace DeclarationList
  | CSDeclarationsStatementsBrace DeclarationList StatementList
  deriving (Show, Eq)

type DeclarationList = [Declaration]

type StatementList = [Statement]

type ExpressionStatement = Maybe Expression

data SelectionStatement
  = SSIf Expression Statement
  | SSIfElse Expression Statement Expression Statement
  | SSSwitch Expression Statement
  deriving (Show, Eq)

data IterationStatement
  = ISWhile Expression Statement
  | DoWhile Statement Expression
  | For ExpressionStatement ExpressionStatement Statement
  | For' ExpressionStatement ExpressionStatement Expression Statement
  deriving (Show, Eq)

data JumpStatement
  = JSGoto Ident
  | JSContinue
  | JSBreak
  | JSReturn
  | JSReturnVal Expression
  deriving (Show, Eq)

type TranslationUnit = [ExternalDeclaration]

data ExternalDeclaration
  = EDFunctionDef FunctionDefinition
  | EDDeclaration Declaration
  deriving (Show, Eq)

data FunctionDefinition
  = FD1 DeclarationSpecifiers Declarator DeclarationList CompoundStatement
  | FD2 DeclarationSpecifiers Declarator CompoundStatement
  | FD3 Declarator DeclarationList CompoundStatement
  | FD4 Declarator CompoundStatement
  deriving (Show, Eq)
